	/*
	 * 总共有4种加载器
	 * 1.bootstrapClassLoader 加载lib下的rt.jar等jar包
	 * 2.extClassLoader 扩展类加载器 加载ext下的jar包
	 * 3.appClassLoader 应用程序类加载器 加载自己写的类
	 * 4.自定义加载器
	 */

    /*
    *类加载的双亲委派:
    *1.加载某个应用程序类首先由appClassLoader查看该类是否已经被加载(findClass(String name))
    *2.如果appClassLoader没有加载该类交给他的父加载器(extClassLoader)加载,如果已加载直接返回
    *3.如果extClassLoader已加载则直接返回,未加载则交给他的父加载器(bootStrapClassLoader)加载
    *4.如果bootStrapClassLoader已加载则直接返回 没有加载就交给extClassLoader加载
    *5.同4 最后交给appClassLoader加载
    *注意:
    *1.是父加载器不是父类 所有classLoader的上层父类都是ClassLoader对象
    *2.如此设计有两点
    *2.1:沙箱安全机制 不可能修改jdk源码
    *2.2:避免类的重复加载
    */

    /*
      1.c++调用jvm.dll 开启虚拟机
      2.c++调用sun.misc.Launcher的getLauncher();
      3.c++调用launcher的getClassLoader()开始加载类;
     */
    /*
      类加载过程 (懒加载 用才加载 不用不加载)
      1.加载 把对应的class文件丢jvm内存
      2.验证 验证class文件的语法
      3.链接 将符号引用转换成直接引用(静态链接编译期就可以确定 动态链接 运行时期才可以确定多态)
      4.准备 赋给类默认值(int是0 object是null boolean是false等)
      5.初始化 赋给类指定的值（static int a=1 准备期a==0）
     */